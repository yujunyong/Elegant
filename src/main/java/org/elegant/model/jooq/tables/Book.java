/*
 * This file is generated by jOOQ.
 */
package org.elegant.model.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.elegant.model.jooq.Indexes;
import org.elegant.model.jooq.Keys;
import org.elegant.model.jooq.Public;
import org.elegant.model.jooq.tables.records.BookRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Book extends TableImpl<BookRecord> {

    private static final long serialVersionUID = 873032544;

    /**
     * The reference instance of <code>PUBLIC.book</code>
     */
    public static final Book BOOK = new Book();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>PUBLIC.book.book_id</code>. 书本id
     */
    public final TableField<BookRecord, Integer> BOOK_ID = createField("book_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "书本id");

    /**
     * The column <code>PUBLIC.book.title</code>. 书本名称
     */
    public final TableField<BookRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "书本名称");

    /**
     * The column <code>PUBLIC.book.dir_id</code>. 书本所在目录
     */
    public final TableField<BookRecord, Integer> DIR_ID = createField("dir_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "书本所在目录");

    /**
     * The column <code>PUBLIC.book.language</code>. 书本使用的语言
     */
    public final TableField<BookRecord, String> LANGUAGE = createField("language", org.jooq.impl.SQLDataType.VARCHAR(50), this, "书本使用的语言");

    /**
     * The column <code>PUBLIC.book.series</code>. 书本所属的系列
     */
    public final TableField<BookRecord, String> SERIES = createField("series", org.jooq.impl.SQLDataType.VARCHAR(100), this, "书本所属的系列");

    /**
     * The column <code>PUBLIC.book.publisher</code>. 出版社
     */
    public final TableField<BookRecord, String> PUBLISHER = createField("publisher", org.jooq.impl.SQLDataType.VARCHAR(50), this, "出版社");

    /**
     * The column <code>PUBLIC.book.publish_time</code>. 出版时间
     */
    public final TableField<BookRecord, LocalDateTime> PUBLISH_TIME = createField("publish_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "出版时间");

    /**
     * The column <code>PUBLIC.book.rating</code>. 评价
     */
    public final TableField<BookRecord, Short> RATING = createField("rating", org.jooq.impl.SQLDataType.SMALLINT, this, "评价");

    /**
     * The column <code>PUBLIC.book.isbn10</code>. isbn10
     */
    public final TableField<BookRecord, Long> ISBN10 = createField("isbn10", org.jooq.impl.SQLDataType.BIGINT, this, "isbn10");

    /**
     * The column <code>PUBLIC.book.isbn13</code>. isbn13
     */
    public final TableField<BookRecord, Long> ISBN13 = createField("isbn13", org.jooq.impl.SQLDataType.BIGINT, this, "isbn13");

    /**
     * The column <code>PUBLIC.book.page</code>. 页数
     */
    public final TableField<BookRecord, Short> PAGE = createField("page", org.jooq.impl.SQLDataType.SMALLINT, this, "页数");

    /**
     * The column <code>PUBLIC.book.format</code>. 书本格式
     */
    public final TableField<BookRecord, String> FORMAT = createField("format", org.jooq.impl.SQLDataType.CHAR(4).nullable(false), this, "书本格式");

    /**
     * The column <code>PUBLIC.book.create_time</code>. 创建时间
     */
    public final TableField<BookRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>PUBLIC.book.update_time</code>.
     */
    public final TableField<BookRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>PUBLIC.book</code> table reference
     */
    public Book() {
        this(DSL.name("book"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.book</code> table reference
     */
    public Book(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>PUBLIC.book</code> table reference
     */
    public Book(Name alias) {
        this(alias, BOOK);
    }

    private Book(Name alias, Table<BookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Book(Name alias, Table<BookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Book(Table<O> child, ForeignKey<O, BookRecord> key) {
        super(child, key, BOOK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BookRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BookRecord>> getKeys() {
        return Arrays.<UniqueKey<BookRecord>>asList(Keys.CONSTRAINT_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Book as(String alias) {
        return new Book(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Book as(Name alias) {
        return new Book(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(String name) {
        return new Book(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(Name name) {
        return new Book(name, null);
    }
}
