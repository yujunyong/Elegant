/*
 * This file is generated by jOOQ.
 */
package org.elegant.model.jooq.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.elegant.model.jooq.tables.BookCover;
import org.elegant.model.jooq.tables.records.BookCoverRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookCoverDao extends DAOImpl<BookCoverRecord, org.elegant.model.jooq.tables.pojos.BookCover, Integer> {

    /**
     * Create a new BookCoverDao without any configuration
     */
    public BookCoverDao() {
        super(BookCover.BOOK_COVER, org.elegant.model.jooq.tables.pojos.BookCover.class);
    }

    /**
     * Create a new BookCoverDao with an attached configuration
     */
    public BookCoverDao(Configuration configuration) {
        super(BookCover.BOOK_COVER, org.elegant.model.jooq.tables.pojos.BookCover.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(org.elegant.model.jooq.tables.pojos.BookCover object) {
        return object.getBookId();
    }

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    public List<org.elegant.model.jooq.tables.pojos.BookCover> fetchByBookId(Integer... values) {
        return fetch(BookCover.BOOK_COVER.BOOK_ID, values);
    }

    /**
     * Fetch a unique record that has <code>book_id = value</code>
     */
    public org.elegant.model.jooq.tables.pojos.BookCover fetchOneByBookId(Integer value) {
        return fetchOne(BookCover.BOOK_COVER.BOOK_ID, value);
    }

    /**
     * Fetch records that have <code>cover IN (values)</code>
     */
    public List<org.elegant.model.jooq.tables.pojos.BookCover> fetchByCover(byte[]... values) {
        return fetch(BookCover.BOOK_COVER.COVER, values);
    }

    /**
     * Fetch records that have <code>image_file_extension IN (values)</code>
     */
    public List<org.elegant.model.jooq.tables.pojos.BookCover> fetchByImageFileExtension(String... values) {
        return fetch(BookCover.BOOK_COVER.IMAGE_FILE_EXTENSION, values);
    }
}
