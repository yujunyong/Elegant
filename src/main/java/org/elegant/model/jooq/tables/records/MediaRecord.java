/*
 * This file is generated by jOOQ.
 */
package org.elegant.model.jooq.tables.records;


import javax.annotation.Generated;

import org.elegant.model.jooq.tables.Media;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MediaRecord extends UpdatableRecordImpl<MediaRecord> implements Record4<String, byte[], String, String> {

    private static final long serialVersionUID = 1517856025;

    /**
     * Setter for <code>PUBLIC.media.media_id</code>. 文件id
     */
    public MediaRecord setMediaId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.media.media_id</code>. 文件id
     */
    public String getMediaId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.media.content</code>. 文件内容
     */
    public MediaRecord setContent(byte... value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.media.content</code>. 文件内容
     */
    public byte[] getContent() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>PUBLIC.media.media_type</code>. 文件类型
     */
    public MediaRecord setMediaType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.media.media_type</code>. 文件类型
     */
    public String getMediaType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.media.file_extension</code>. 文件扩展名
     */
    public MediaRecord setFileExtension(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.media.file_extension</code>. 文件扩展名
     */
    public String getFileExtension() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, byte[], String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, byte[], String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Media.MEDIA.MEDIA_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field2() {
        return Media.MEDIA.CONTENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Media.MEDIA.MEDIA_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Media.MEDIA.FILE_EXTENSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getMediaId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component2() {
        return getContent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getMediaType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getFileExtension();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getMediaId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value2() {
        return getContent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getMediaType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getFileExtension();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MediaRecord value1(String value) {
        setMediaId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MediaRecord value2(byte... value) {
        setContent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MediaRecord value3(String value) {
        setMediaType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MediaRecord value4(String value) {
        setFileExtension(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MediaRecord values(String value1, byte[] value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MediaRecord
     */
    public MediaRecord() {
        super(Media.MEDIA);
    }

    /**
     * Create a detached, initialised MediaRecord
     */
    public MediaRecord(String mediaId, byte[] content, String mediaType, String fileExtension) {
        super(Media.MEDIA);

        set(0, mediaId);
        set(1, content);
        set(2, mediaType);
        set(3, fileExtension);
    }
}
